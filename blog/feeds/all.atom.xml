<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-05-11T09:30:00+08:00</updated><entry><title>40423119_繪製正齒輪</title><link href="./40423119_hui-zhi-zheng-chi-lun.html" rel="alternate"></link><published>2017-05-11T09:30:00+08:00</published><updated>2017-05-11T09:30:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-05-11:./40423119_hui-zhi-zheng-chi-lun.html</id><summary type="html">&lt;p&gt;1.繪製正齒輪&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")

x = (canvas.width)/2-100
y = (canvas.height)/2
r = 0.8*(canvas.height/2)

# r17 , r11
n17 = 17
n11 = 11
n13 = 13
canvas_size = canvas.height*0.4
r17 = canvas_size*n17/(n17+n11+n13)
r11 = canvas_size*n11/(n17+n11+n13)
r13 = canvas_size*n13/(n17+n11+n13)
x17 = x - r17
y17 = y
x11 = x + r11
y11 = y
x13 = x + 2*r11+r13
y13 = y
# 壓力角
pa = 20


gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "blue")
gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "black")
gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "green")
div = doc["onegear_div"]

&lt;/script&gt;</summary><category term="協同2D正齒輪傳動繪圖"></category></entry><entry><title>40423119_W11作業(二)</title><link href="./40423119_w11zuo-ye-er.html" rel="alternate"></link><published>2017-05-04T11:17:00+08:00</published><updated>2017-05-04T11:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-05-04:./40423119_w11zuo-ye-er.html</id><summary type="html">&lt;p&gt;1.協同2D正齒輪傳動繪圖(二)&lt;/p&gt;


&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;p&gt;齒數：13t
&lt;!-- 以下處理 Cango Spur Gear --&gt;&lt;/p&gt;
&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 13
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(2*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 13
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
# 利用 gear 資料複製一份, 命名為 gear1
gear1 = gear.dup()

from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})

set_interval(draw, 2)
&lt;/script&gt;</summary><category term="協同2D正齒輪傳動繪圖"></category></entry><entry><title>40423119_W11作業</title><link href="./40423119_w11zuo-ye.html" rel="alternate"></link><published>2017-05-04T10:17:00+08:00</published><updated>2017-05-04T10:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-05-04:./40423119_w11zuo-ye.html</id><summary type="html">&lt;p&gt;1.協同2D正齒輪傳動繪圖&lt;/p&gt;


&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:&lt;/p&gt;
&lt;p&gt;齒數：13t
&lt;!-- 導入 Brython 標準程式庫 --&gt;&lt;/p&gt;
&lt;script src="../data/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 13
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;p&gt;齒數：11t
&lt;!-- 以下處理 Cango Spur Gear --&gt;&lt;/p&gt;
&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 11
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;</summary><category term="協同2D正齒輪傳動繪圖"></category></entry><entry><title>40423119_W10作業</title><link href="./40423119_w10zuo-ye.html" rel="alternate"></link><published>2017-04-27T20:17:00+08:00</published><updated>2017-04-27T20:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-04-27:./40423119_w10zuo-ye.html</id><summary type="html">&lt;p&gt;1.乘法查驗&lt;/p&gt;


&lt;h2&gt;乘法查驗&lt;/h2&gt;
&lt;p&gt;乘法查驗影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-q_WUfGj4Iw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;程式碼&lt;/p&gt;
&lt;p&gt;mul.py
&lt;pre class="brush: python"&gt;
def mul(a, b): #定義 a , b
    return a*b #a 乘以 b
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;app2.py
&lt;pre class="brush: python"&gt;
import sys #導入 sys
sys.path.append("./m1") #資料夾路徑
import mul #導入 mul.py&lt;/p&gt;
&lt;p&gt;multiply = mul.mul(5, 5) #乘法演算&lt;/p&gt;
&lt;p&gt;print(multiply) #輸出結果
&lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;網頁測試乘法&lt;/h1&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container3" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container3']
degree = math.pi/180
def button3(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)*float(b))
doc["button3"].bind("click", button3)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button3"&gt;按下取 a b 值&lt;/button&gt;&lt;/p&gt;</summary><category term="乘法查驗"></category></entry><entry><title>40423119_期中協同查驗與自評</title><link href="./40423119_qi-zhong-xie-tong-cha-yan-yu-zi-ping.html" rel="alternate"></link><published>2017-04-20T20:17:00+08:00</published><updated>2017-04-20T20:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-04-20:./40423119_qi-zhong-xie-tong-cha-yan-yu-zi-ping.html</id><summary type="html">&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;2.四連桿機構協同 Trace Point 查驗&lt;/p&gt;
&lt;p&gt;3.Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/p&gt;
&lt;p&gt;4.分組協同零件展示&lt;/p&gt;


&lt;h2&gt;(一) Fossil Server 實習查驗&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mde2a2.kmol.info/midterm/ag1/index"&gt;ag1期中考報告 fossil &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;(二) 四連桿機構協同 Trace Point 查驗&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://40423119.github.io/2016fallcadp_hw/blog/40423119_si-lian-gan-ji-gou-xie-tong-trace-point-cha-yan.html"&gt;40423119_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;(三) Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/h2&gt;
&lt;p&gt;利用SolveSpace畫Fourbar Walker影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/K2Go2NYjTVA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;利用SolveSpace畫Fourbar Walker圖片&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/IY313RC"&gt;&lt;img src="http://i.imgur.com/IY313RC.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用OnShape組立Fourbar Walker影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QxSqVL9Np2c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;(四) 分組協同零件展示&lt;/h2&gt;
&lt;p&gt;&lt;link href="./../work/madeleine/src/css/Madeleine.css" rel="stylesheet"&gt;
&lt;script src="./../work/madeleine/src/stats.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/detector.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/three.min.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/Madeleine.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div id="target" class="madeleine"&gt;&lt;/div&gt;

&lt;script&gt;
window.onload = function(){
    var madeleine = new Madeleine({
      target: 'target', // target div id
      data: './../data/Fourbar Walker.stl', // data path
      path: './../work/madeleine/src/' // path to source directory from current html file
    });
}; 
&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r68/three.min.js"
&gt;&lt;/script&gt;

&lt;script src="https://rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js"
&gt;&lt;/script&gt;

&lt;script src="./../w9/loader.js"&gt;&lt;/script&gt;

&lt;script src="./../w9/stl.js"&gt;&lt;/script&gt;

&lt;div&gt;
select stl file: &lt;input type="file" id="file" /&gt; or drop stl file
&lt;/div&gt;

&lt;div id="view"&gt;&lt;/div&gt;</summary><category term="期中協同查驗與自評"></category></entry><entry><title>40423119_W6作業</title><link href="./40423119_w6zuo-ye.html" rel="alternate"></link><published>2017-03-30T21:53:00+08:00</published><updated>2017-03-30T21:53:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-30:./40423119_w6zuo-ye.html</id><summary type="html">&lt;p&gt;1.四連桿運動模擬&lt;/p&gt;
&lt;p&gt;2.八連桿運動模擬
&lt;/p&gt;
&lt;h1&gt;四連桿機構轉入 V-rep 進行運動模擬&lt;/h1&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FT_uW3vwzoU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/oCKGQROxAN8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;運動模擬影片&lt;/h2&gt;
&lt;p&gt;完成組立後轉進 V-rep，分解零組件，加入旋轉軸，並設定各軸及連桿參數。&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wQs_5nRPu7c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;八連桿機構轉入 V-rep 進行運動模擬&lt;/h1&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;p&gt;零件1&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CF7CKkHGRWc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件2&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bLMLrBlDQwA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;八連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/s9gMIHQNstQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;運動模擬影片&lt;/h2&gt;
&lt;p&gt;完成組立後轉進 V-rep，分解零組件，加入旋轉軸，並設定各軸及連桿參數。&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/czzDxH8g5cw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="四連桿運動模擬&amp;八連桿運動模擬"></category></entry><entry><title>40423119_W5作業</title><link href="./40423119_w5zuo-ye.html" rel="alternate"></link><published>2017-03-23T22:53:00+08:00</published><updated>2017-03-23T22:53:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-23:./40423119_w5zuo-ye.html</id><summary type="html">&lt;p&gt;1.單連桿機構轉入 V-rep 進行運動模擬
&lt;/p&gt;
&lt;h1&gt;單連桿機構轉入 V-rep 進行運動模擬&lt;/h1&gt;
&lt;h2&gt;運動模擬影片&lt;/h2&gt;
&lt;p&gt;完成組立後轉進 V-rep，分解零組件，加入旋轉軸&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/UXCR48-yRwA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="單連桿運動模擬"></category></entry><entry><title>40423119_W4作業</title><link href="./40423119_w4zuo-ye.html" rel="alternate"></link><published>2017-03-16T23:17:00+08:00</published><updated>2017-03-16T23:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-16:./40423119_w4zuo-ye.html</id><summary type="html">&lt;p&gt;1.Hyperworks安裝心得&lt;/p&gt;
&lt;p&gt;2.利用Solvespace組裝單連桿機構&lt;/p&gt;
&lt;p&gt;3.利用Solvespace組立並轉入V-rep&lt;/p&gt;
&lt;p&gt;4.平面四連桿機構的運動路徑方程式推導&lt;/p&gt;
&lt;p&gt;5.四連桿平面機構繪圖&lt;/p&gt;
&lt;p&gt;6.機械手臂動態模擬
&lt;/p&gt;
&lt;h1&gt;Hyperworks 14.0 學生版&lt;/h1&gt;
&lt;h2&gt;Hyperworks安裝心得&lt;/h2&gt;
&lt;p&gt;首先要安裝 Hyperworks 14 學生版之前要先註冊帳號密碼，註冊完畢後訊息將會寄到信箱，此時信箱內容會有一串連結，點進去之後就可以下載 Hyperworks 14 學生版(但須等待對方批準許可才能下載，可能需要一段時間)。上述是在安裝這套軟體之前所需要的程序，而且步驟有點繁雜，在同一個帳號內不能多個下載 Hyperworks 及套件，每當安裝一個新套件就要再重新輸入資訊，所以會花很久的時間在下載安裝。&lt;/p&gt;
&lt;h1&gt;利用Solvespace組裝單連桿機構&lt;/h1&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LssiHmmjdUg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;單連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/DTUh51Hk1lo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;單連桿圖檔&lt;a href="./../data/w2/onelink"&gt;(Download)&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;利用Solvespace組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;單連桿組立轉入V-rep影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-ab1ZZkflOc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;平面四連桿機構的運動路徑方程式推導&lt;/h1&gt;
&lt;p&gt;利用 Sympy 求解：&lt;/p&gt;
&lt;pre class="brush: python"&gt;
from sympy import *
'''
已知四連桿四個關鍵點座標分別為 A (x1, y1), B (x2, y2), C (x3, y3) 與 D (x4, y4)
且 E (x5, y5) 點相關參考x 座標距離為 d5, 而 y座標距離為 d6, 以及輸入角度逆時鐘轉 t 度
以 (x1, y1), (x4, y4), d1, d2, d3, d5, d6 及 t 等 10 個參數作為輸入, 
求 E 點座標 (x5, y5)
假設 AB 連桿長度為 d1, BC 連桿長度為 d2, CD 連桿長度為 d3, AD 距離為 d4
'''
x1, x2, x3, x4, x5 = symbols('x1 x2 x3 x4 x5')
y1, y2, y3, y4, y5 = symbols('y1 y2 y3 y4 y5')
d1, d2, d3, d4, d5, d6, t, t3 = symbols('d1 d2 d3 d4 d5 d6 t t3')
ah, bh, aj, dj, bd, hj, dk, bk = symbols('ah bh aj dj bd hj dk bk')
# angle daj defined as daj
daj, adj, bad, bcd, bdc, bdk = symbols('daj adj bad bcd bdc bdk')
# degree factor
degree, pi = symbols('degree pi')
degree = pi/180.0
# 假設 B 點的絕對 y 座標方向投影點為 H
d1 = sqrt((x1-x2)**2+(y1-y2)**2)
#print(d1)
d2 = sqrt((x2-x3)**2+(y2-y3)**2)
d3 = sqrt((x3-x4)**2+(y3-y4)**2)
d4 = sqrt((x1-x4)**2+(y1-y4)**2)
ah = d1*cos(t)
bh = sqrt(d1**2 - ah**2)
aj = Abs(x4-x1)
dj = Abs(y4-y1)
dk = aj - ah
bk =  bh - dj
t3 = bdc + bdk
# for daj, dj**2 = d4**2+aj**2 -2*d4*aj*cos(daj)
pos = 1
if pos == 1:
    daj = solve(-dj**2+d4**2+aj**2 -2*d4*aj*cos(daj), daj)[0]
else:
    daj = solve(-dj**2+d4**2+aj**2 -2*d4*aj*cos(daj), daj)[1]
#print(daj)
# for adj, aj**2=d4**2+dj**2-2*d4*aj*cos(adj)
if pos == 1:
    adj = solve(-aj**2+d4**2+dj**2-2*d4*aj*cos(adj), adj)[0]
else:
    adj = solve(-aj**2+d4**2+dj**2-2*d4*aj*cos(adj), adj)[0]
#print(adj)
bad = t*degree - daj
# according triangle tad find bd
#bd**2 = d1**2+d4**2-2*d1*d4*cos(bad)
if pos == 1:
    bd = solve(-bd**2+d1**2+d4**2-2*d1*d4*cos(bad), bd)[0]
else:
    bd = solve(-bd**2+d1**2+d4**2-2*d1*d4*cos(bad), bd)[1]
print(bd)

if pos == 1:
    bcd = solve(-bd**2+d2**2+d3**2-2*d2*d3*cos(bcd), bcd)[0]
else:
    bcd = solve(-bd**2+d2**2+d3**2-2*d2*d3*cos(bcd), bcd)[1]

if pos == 1:
    bdk = solve(-bk**2+bd**2+dk**2-2*bd*dk*cos(bdk), bdk)[0]
else:
    bdk = solve(-bk**2+bd**2+dk**2-2*bd*dk*cos(bdk), bdk)[1]

if pos == 1:
    bdc = solve(-d2**2+d3**2+bd**2-2*d3*bd*cos(bdc), bdc)[0]
else:
    bdc = solve(-d2**2+d3**2+bd**2-2*d3*bd*cos(bdc), bdc)[1]
print(t3)
&lt;/pre&gt;

&lt;h2&gt;四連桿平面機構繪圖&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/brython_dist.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango-8v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango2D-7v04-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;canvas id="plotarea2" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from browser import window

cango = window.Cango2D.new
shapedefs = window.shapeDefs
obj2d = window.Obj2D.new
group2d = window.Group2D.new
cgo = cango("plotarea2")

x1, y1 = 20, 20
cx1, cy1 = 60, 120
x2, y2 = 160, 130
cx2, cy2 = 150, 130
cx3, cy3 = 170, 20
x3, y3 = 150, 100

def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()

def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()

def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()

def dragX1(mousePos):
    global x1, y1
    x1 = mousePos.x
    y1 = mousePos.y
    drawCurve()

def drawCurve():
    # curve change shape so it must be re-draw each time
    # draw a quadratic bezier from x1,y2 to x2,y2
    qbez = obj2d(['M', x1, y1, 'Q', cx1, cy1, x2, y2], "PATH",  {
          "strokeColor":'blue'})
    cbez = obj2d(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], "PATH",  {
          "strokeColor":'green'})
    # show lines to control point
    '''
    L1 = obj2d(['M', x1, y1, 'L', cx1, cy1, x2, y2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})  # semi-transparent gray
    L2 = obj2d(['M', x2, y2, 'L', cx2, cy2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})
    L3 = obj2d(['M', x3, y3, 'L', cx3, cy3], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})
    '''
    L1 = obj2d(['M', x1, y1, 'L', cx1, cy1], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})  # semi-transparent gray
    L2 = obj2d(['M', cx1, cy1, 'L', cx2, cy2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})
    L3 = obj2d(['M', cx2, cy2, 'L', cx3, cy3], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})
    #c1.transform.reset()
    c1.transform.translate(cx1, cy1)
    #c2.transform.reset()
    c2.transform.translate(cx2, cy2)
    #c3.transform.reset()
    c3.transform.translate(cx3, cy3)
    #mx1.transform.reset()
    mx1.transform.translate(x1, y1)
    #grp = group2d(qbez, cbez, L1, L2, L3, c1, c2, c3)
    grp = group2d(L1, L2, L3, c1, c2, c3, mx1)
    cgo.clearCanvas()
    cgo.render(grp)

cgo.clearCanvas("lightyellow")
cgo.setWorldCoords(0, 0, 200)

# draggable control points
c1 = obj2d(shapedefs.circle(4), "SHAPE", {"fillColor":'red'})
c1.enableDrag(None, dragC1, None)
c2 = c1.dup()
c2.enableDrag(None, dragC2, None)
c3 = c1.dup()
c3.enableDrag(None, dragC3, None)
mx1 = c1.dup()
mx1.enableDrag(None, dragX1, None)
drawCurve();
&lt;/script&gt;

&lt;h2&gt;機械手臂動態模擬&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/brython_dist.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango-8v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango2D-7v04-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;canvas id='robot' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from browser import window

cango2d = window.Cango2D.new
shapedefs = window.shapeDefs
obj2d = window.Obj2D.new
tweener = window.Tweener.new

cgo = cango2d("robot")
# 清除畫面
cgo.clearCanvas("lightyellow")
cgo.setWorldCoords(-50, -50, 300)

# 加上基軸與第一桿
# 畫筆移到 -20, -10, 畫直線到 -10,-10 以及 -10,0 
standData = ['M', -20,-10, 'L', -10,-10, -10,0, 'A', 10,10,0,0,0,10,0, 'L',10,-10, 20,-10, 20,-40, -20,-40,'z']
stand = obj2d(standData, "SHAPE", {
        "fillColor":'darkgray',
        "border": True,
        "strokeColor": "#222222" })
axle0 = obj2d(shapedefs.circle(10), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222" })
armGrp = cgo.createGroup2D(stand, axle0)

segData = ['M',0,-8, 'A',8,8,0,0,0,0,8, 'L',50,8, 'A',8,8,0,0,0,50,-8, 'Z']
seg1 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
# 利用 zIndex 決定疊層的先後次序
axle1 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle1.translate(50, 0)
seg1Grp = cgo.createGroup2D(seg1, axle1)
armGrp.addObj(seg1Grp)

# 加上第二軸
seg2 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
axle2 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle2.translate(50, 0)
seg2Grp = cgo.createGroup2D(seg2, axle2)
cgo.render(seg2Grp)
# 請注意 seg2Grp 加上 seg1Grp 物件上
seg1Grp.addObj(seg2Grp)

seg3 = obj2d(segData, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
axle3 = obj2d(shapedefs.circle(6), "SHAPE", {
        'fillColor':'gray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': 1 })
axle3.translate(50, 0)
seg3Grp = cgo.createGroup2D(seg3, axle3)
seg2Grp.addObj(seg3Grp)

seg4Data = ['M',0,-6, 'A',6,6,0,0,0,0,6, 'L',40,6, 40,12, 50,12, 50,-12, 40,-12, 40,-6, 'Z']
seg4 = obj2d(seg4Data, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
seg3Grp.addObj(seg4)

# setup animation
animData = {'s1': [0, 80, 45, 0],
                  's2': [0, -60, -60, 0],
                  's3': [0, -90, 0, 90, 0],
                  's4': [0, 30, -90, 0]}

armTwnr = tweener(0, 3500, 'loop')

def initArm(opts):
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.translate(50,0)
    seg4.transform.translate(50,0)


def armPathFn(time, opts):
    seg1Rot = armTwnr.getVal(time, opts.s1)
    seg2Rot = armTwnr.getVal(time, opts.s2)
    seg3Rot = armTwnr.getVal(time, opts.s3)
    seg4Rot = armTwnr.getVal(time, opts.s4)

    seg1Grp.transform.rotate(seg1Rot)
    seg2Grp.transform.rotate(seg2Rot)
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.rotate(seg3Rot)
    seg3Grp.transform.translate(50,0)
    seg4.transform.rotate(seg4Rot)
    seg4.transform.translate(50,0)

cgo.animate(armGrp, initArm, armPathFn, animData)
cgo.playAnimation()
&lt;/script&gt;</summary><category term="Onelink &amp; Hyperworks應用 &amp; 平面機構運動模擬"></category></entry><entry><title>40423119_W3作業</title><link href="./40423119_w3zuo-ye.html" rel="alternate"></link><published>2017-03-09T23:17:00+08:00</published><updated>2017-03-09T23:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-09:./40423119_w3zuo-ye.html</id><summary type="html">&lt;p&gt;1.Hyperworks翻譯(英翻中)&lt;/p&gt;
&lt;p&gt;2.利用Solvespace及Onshape繪製四連桿機構並組立&lt;/p&gt;
&lt;p&gt;3.將四連桿機構組立轉成STL檔，並轉入V-rep&lt;/p&gt;
&lt;p&gt;4.在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡
&lt;/p&gt;
&lt;h1&gt;Hyperworks16-4&lt;/h1&gt;
&lt;h2&gt;翻譯影片1&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fTgaulekEZ4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Hyperworks16-4內容：&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;In the cfd area we we develop a lot on our own technology in Arkansas&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在CFD領域，我們我們開發了很多我們自己的技術在阿肯色州&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Arkansas is positioned as the general-purpose navier-stokes CFD solver so with our new turbulence modeling&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;阿肯色被定位為通用納維-斯托克斯CFD求解使我們的新湍流模型&lt;/p&gt;
&lt;p&gt;&lt;b&gt;we will be able to cover more use cases and we did in the past&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;所以我們的新湍流模型，將能覆蓋更多過去我們在做的使用案例&lt;/p&gt;
&lt;p&gt;&lt;b&gt;we made an investment into a small company in Germany the fluid Dinah that focus on a GPU use and cfd simulation&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;我們投資德國名叫 fluid Dinahe的小公司專門再做GPU的使用和CFD模擬&lt;/p&gt;
&lt;p&gt;&lt;b&gt;and there are two products that we are putting our energy into one is called ultra fluid X which is a lot of balls on external aerodynamics software that is being used in a virtual internal setting&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;我們把精力投入到一個被稱為超流體X主要是在虛擬的內部設置使用很多外部空氣動力學軟件球 &lt;/p&gt;
&lt;p&gt;&lt;b&gt;another code that came with the investment is none of you would accept use of SPH technologies we are focusing here particularly on simulating of oil flow in transmission cages&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;而另個代碼使用SPH技術重點在於對石油模擬與傳輸的記錄&lt;/p&gt;
&lt;p&gt;&lt;b&gt;record is coming out reserves is a new evolution of their their software a big focus in 14 over the finite-difference time-domain most of the solutions and pako our frequency domain solutions now&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;軟件有了全新的進化 因為有14等分的分差時域有了解決方案，並在PAKO頻域提供一個解決方案&lt;/p&gt;
&lt;p&gt;&lt;b&gt;we will be providing a time domain solution that will make us more competitive also this solution is very well suited for GPU processing a lot of people as they talk about the physics I think about couples followers&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;這讓我們更有競爭力因為這種解決方案適合於GPU處理了很多運算及演算&lt;/p&gt;
&lt;p&gt;&lt;b&gt;or two lots of years to actually look at certain use cases and work with clients to develop solve a coupling lewis structure interaction is really one of&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;並實際運用在某些使用情況與客戶一起開發解決耦合問題也是非常重要的&lt;/p&gt;
&lt;p&gt;&lt;b&gt;the coupling use cases and it's very important also here we're developing off  the start so that root structure actually the direct coupling can be done the softest &lt;/b&gt; &lt;/p&gt;
&lt;p&gt;耦合比例非常重要 我們正在開發能使根部結構耦合可以做到最柔軟的方法&lt;/p&gt;
&lt;p&gt;&lt;b&gt;we have been developing a coupling actually of arkansas also with multi body dynamics and we did recent just recently a paper at the japanese Society of Automotive Engineers simulating a lane change of a car in a wind tunnel&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;我們一直在阿肯色州開發耦合和多體動力學
最近也派美國汽車工程師與日本工程師交流&lt;/p&gt;
&lt;p&gt;&lt;b&gt;so let this little is a very exciting picture of course the validation is another issue here but I think we we have a great technology here and we can work with clients to improve the technology and validate the technology&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;這是一個非常難得的經驗 找出我們的問題
利用這次經驗 拿出更厲害的技術與我們的客戶合作&lt;/p&gt;
&lt;h1&gt;Hyperworks2&lt;/h1&gt;
&lt;h2&gt;翻譯影片2&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/WGAmkWxPiig" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Hyperworks2內容：&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;The 2017 HyperWorks release has a lot&lt;/b&gt;
&lt;p&gt;在2017年HyperWorks發行很多版本&lt;/p&gt;
&lt;b&gt;of enhancements to the modeling and assembly capabilities&lt;/b&gt;
&lt;p&gt;對軟件的建模和組裝能力的增強&lt;/p&gt;
&lt;b&gt;So we put in a new parts browser with a built-in part library&lt;/b&gt;
&lt;p&gt;所以我們在一個新的零件瀏覽器與一個內置零件庫&lt;/p&gt;
&lt;b&gt;The part library is a great tool for storing and loading work in progress&lt;/b&gt;
&lt;p&gt;零件庫是用於存儲和加載正在進行工作的一個很好的工具&lt;/p&gt;
&lt;b&gt;So you can store a catalog of all the common parts&lt;/b&gt;
&lt;p&gt;因此，您可以存儲所有公共部分的目錄&lt;/p&gt;
&lt;b&gt;that a workgroup needs to use,so they can download their models from their PLM system&lt;/b&gt;
&lt;p&gt;工作組需要使用，因此他們可以從他們的PLM系統下載他們的模型&lt;/p&gt;
&lt;b&gt;and store them locally in a parts library for a work in progress&lt;/b&gt;
&lt;p&gt;並將它們本地存儲在正在進行的工作的零件庫中 &lt;/p&gt;
&lt;b&gt;And it keeps revision control on them,&lt;/b&gt;
&lt;p&gt;他保持對它們的修訂控制&lt;/p&gt;
&lt;b&gt;so they can back up to the different versions and reload.&lt;/b&gt;
&lt;p&gt;所以他們可以備份到不同的版本並重新加載。&lt;/p&gt;
&lt;b&gt;And they can also build different configurations now of their models.&lt;/b&gt;
&lt;p&gt;他們也可以建立不同的配置到他們現在的的模型。&lt;/p&gt;
&lt;b&gt;In the configuration modeler now&lt;/b&gt;
&lt;p&gt;現在在配置建模器&lt;/p&gt;
&lt;b&gt;they can import parts from part library and then group&lt;/b&gt;
&lt;p&gt;他們可以從零件庫導入零件然後分組&lt;/p&gt;
&lt;b&gt;them into what we call part sets,which are&lt;/b&gt;
&lt;p&gt;他們變成我們所說的部分集&lt;/p&gt;
&lt;b&gt;convenient groupings of parts.&lt;/b&gt;
&lt;p&gt;即零件方便分組&lt;/p&gt;
&lt;b&gt;And then they can drag those parts together into assemblies,&lt;/b&gt;
&lt;p&gt;然後他們可以將這些部分一起拖入組件&lt;/p&gt;
&lt;b&gt;and configure them for different load&lt;/b&gt;
&lt;p&gt;並為不同負載配置它們的&lt;/p&gt;
&lt;b&gt;cases or different variations of their models.&lt;/b&gt;
&lt;p&gt;情況或他們的模型的不同變化&lt;/p&gt;
&lt;b&gt;the other feature of haveing parts in the software&lt;/b&gt;
&lt;p&gt;硬件部分的軟件中的另一個特點&lt;/p&gt;
&lt;b&gt;is we do part instancing now,too.&lt;/b&gt;
&lt;p&gt;我們現在也做實例化&lt;/p&gt;
&lt;b&gt;So if you load in a part that has&lt;/b&gt;
&lt;p&gt;所以如果你加載在一個部分&lt;/p&gt;
&lt;b&gt;multiple instances through the model,we support that.&lt;/b&gt;
&lt;p&gt;我們支持多個實例通過模型&lt;/p&gt;
&lt;b&gt;We don't have to create multiple copies of it.&lt;/b&gt;
&lt;p&gt;我們不必創建它的多個副本&lt;/p&gt;
&lt;b&gt;We can actually do the instancing,which is very memory efficient.&lt;/b&gt;
&lt;p&gt;我們可以做實際，這是非常有效的記憶。&lt;/p&gt;
&lt;b&gt;Also in the model building assembly&lt;/b&gt;
&lt;p&gt;也在模型建築組裝&lt;/p&gt;
&lt;b&gt;tool set is enhanced ID management as well.&lt;/b&gt;
&lt;p&gt;工具集也是增強的ID管理&lt;/p&gt;
&lt;b&gt;So not only can we assign IDs based on different rules&lt;/b&gt;
&lt;p&gt;因此，我們不僅可以根據不同的規則分配ID &lt;/p&gt;
&lt;b&gt;that you define in the software,but you can import ID systems&lt;/b&gt;
&lt;p&gt;您可以在軟件中定義，但可以導入ID系統&lt;/p&gt;
&lt;b&gt;form spreadsheets,XML files,databases,&lt;/b&gt;
&lt;p&gt;形式電子表格，XML文件，數據庫，&lt;/p&gt;
&lt;b&gt;and so forth,that are then used when&lt;/b&gt;
 &lt;p&gt;等等，然後在使用&lt;/p&gt;
&lt;b&gt;it does the renumbering or the assembly of the model.&lt;/b&gt;
&lt;p&gt;它進行重新編號或模型的組裝&lt;/p&gt;
&lt;b&gt;it has to resolve part collisions.&lt;/b&gt;
&lt;p&gt;它必須解決部分碰撞。&lt;/p&gt;
&lt;b&gt;Really important part of doing model assembly&lt;/b&gt;
&lt;p&gt;做模型組裝重要的部分&lt;/p&gt;
&lt;b&gt;is connecting all those parts together.&lt;/b&gt;
&lt;p&gt;將所有這些部分連接在一起&lt;/p&gt;
&lt;b&gt;Connectors are really vital to the overall assembly process.&lt;/b&gt;
&lt;p&gt;連接器對整個裝配過程至關重要。&lt;/p&gt;
&lt;b&gt;The quality of the connector that you create really&lt;/b&gt;
&lt;p&gt;您真正創建的連接器的質量&lt;/p&gt;
&lt;b&gt;determines the outcome of the quality&lt;/b&gt;
&lt;p&gt;確定質量的結果&lt;/p&gt;
&lt;b&gt;of the overall assembled model as well.&lt;/b&gt;
&lt;p&gt;對整體組裝模型&lt;/p&gt;
&lt;b&gt;So for us to get a good high fidelity solution,&lt;/b&gt;
&lt;p&gt;所以為我們得到一個良好的高保真度解決方案&lt;/p&gt;
&lt;b&gt;you have to have a really good connection generation as well.&lt;/b&gt;
&lt;p&gt;你必須有一個非常好的連接生成&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;利用Solvespace組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;Solvespace四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hifjpdG2q1o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Solvespace組立轉入V-rep影片&lt;/h2&gt;
&lt;p&gt;完成 Solvespace 30-50-60 cm 比例的四連桿組立, 並轉出 stl 檔案, 以 import 方式轉入 V-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5TFlfO9Ko5I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;利用Onshape組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;Onshape四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tnjI7k_E29c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Onshape組立轉入V-rep影片&lt;/h2&gt;
&lt;p&gt;利用 Onshape 完成上述相同尺寸之四連桿機構, 以 stl 轉出後, 再轉入 V-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/i1FMfhlM_tg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;Solvespace三角形頂點運動軌跡&lt;/h1&gt;
&lt;h2&gt;運動軌跡影片&lt;/h2&gt;
&lt;p&gt;在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QWD_GdWxkuI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Excel運動軌跡模擬影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/uZ02DpS54LI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Hyperworks翻譯 &amp; V-rep應用"></category></entry><entry><title>40423119_W2作業</title><link href="./40423119_w2zuo-ye.html" rel="alternate"></link><published>2017-03-02T22:17:00+08:00</published><updated>2017-03-02T22:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-02:./40423119_w2zuo-ye.html</id><summary type="html">&lt;p&gt;1.利用Solvespace繪製四連桿機構&lt;/p&gt;
&lt;p&gt;2.修改stunnel.conf的IP位址
&lt;/p&gt;
&lt;h1&gt;利用Solvespace組裝四連桿機構&lt;/h1&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gAwOJAX0GHk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hifjpdG2q1o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;四連桿圖檔&lt;a href="./../data/w2/fourbar"&gt;(Download)&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;修改stunnel.conf的IP位址&lt;/h1&gt;
&lt;h2&gt;修改IP位址影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/UTBQGDmAGs8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Four-bar linkage &amp; IP"></category></entry></feed>