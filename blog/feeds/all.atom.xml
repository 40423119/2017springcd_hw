<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-03-16T23:17:00+08:00</updated><entry><title>40423119_W4作業</title><link href="./40423119_w4zuo-ye.html" rel="alternate"></link><published>2017-03-16T23:17:00+08:00</published><updated>2017-03-16T23:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-16:./40423119_w4zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;利用Solvespace組裝單連桿機構&lt;/h2&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LssiHmmjdUg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;單連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/DTUh51Hk1lo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;利用Solvespace組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;單連桿組立轉入V-rep影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-ab1ZZkflOc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;四連桿平面機構繪圖&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/brython_dist.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango-8v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango2D-7v04-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下執行 Brython 程式 --&gt;

&lt;canvas id="plotarea2" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from browser import window

cango = window.Cango2D.new
shapedefs = window.shapeDefs
obj2d = window.Obj2D.new
group2d = window.Group2D.new
cgo = cango("plotarea2")

x1, y1 = 20, 20
cx1, cy1 = 60, 120
x2, y2 = 160, 130
cx2, cy2 = 150, 130
cx3, cy3 = 170, 20
x3, y3 = 150, 100

def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()

def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()

def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()

def dragX1(mousePos):
    global x1, y1
    x1 = mousePos.x
    y1 = mousePos.y
    drawCurve()

def drawCurve():
    # curve change shape so it must be re-draw each time
    # draw a quadratic bezier from x1,y2 to x2,y2
    qbez = obj2d(['M', x1, y1, 'Q', cx1, cy1, x2, y2], "PATH",  {
          "strokeColor":'blue'})
    cbez = obj2d(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], "PATH",  {
          "strokeColor":'green'})
    # show lines to control point
    '''
    L1 = obj2d(['M', x1, y1, 'L', cx1, cy1, x2, y2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})  # semi-transparent gray
    L2 = obj2d(['M', x2, y2, 'L', cx2, cy2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})
    L3 = obj2d(['M', x3, y3, 'L', cx3, cy3], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "dashed":[4]})
    '''
    L1 = obj2d(['M', x1, y1, 'L', cx1, cy1], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})  # semi-transparent gray
    L2 = obj2d(['M', cx1, cy1, 'L', cx2, cy2], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})
    L3 = obj2d(['M', cx2, cy2, 'L', cx3, cy3], "PATH", {
      "strokeColor":"rgba(0, 0, 0, 0.2)",
      "solided":[10]})
    #c1.transform.reset()
    c1.transform.translate(cx1, cy1)
    #c2.transform.reset()
    c2.transform.translate(cx2, cy2)
    #c3.transform.reset()
    c3.transform.translate(cx3, cy3)
    #mx1.transform.reset()
    mx1.transform.translate(x1, y1)
    #grp = group2d(qbez, cbez, L1, L2, L3, c1, c2, c3)
    grp = group2d(L1, L2, L3, c1, c2, c3, mx1)
    cgo.clearCanvas()
    cgo.render(grp)

cgo.clearCanvas("lightyellow")
cgo.setWorldCoords(0, 0, 200)

# draggable control points
c1 = obj2d(shapedefs.circle(4), "SHAPE", {"fillColor":'red'})
c1.enableDrag(None, dragC1, None)
c2 = c1.dup()
c2.enableDrag(None, dragC2, None)
c3 = c1.dup()
c3.enableDrag(None, dragC3, None)
mx1 = c1.dup()
mx1.enableDrag(None, dragX1, None)
drawCurve();
&lt;/script&gt;

&lt;h2&gt;機械手臂動態模擬&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/brython_dist.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango-8v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango2D-7v04-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py --&gt;

&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;canvas id='robot' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from browser import window

cango2d = window.Cango2D.new
shapedefs = window.shapeDefs
obj2d = window.Obj2D.new
tweener = window.Tweener.new

cgo = cango2d("robot")
# 清除畫面
cgo.clearCanvas("lightyellow")
cgo.setWorldCoords(-50, -50, 300)

# 加上基軸與第一桿
# 畫筆移到 -20, -10, 畫直線到 -10,-10 以及 -10,0 
standData = ['M', -20,-10, 'L', -10,-10, -10,0, 'A', 10,10,0,0,0,10,0, 'L',10,-10, 20,-10, 20,-40, -20,-40,'z']
stand = obj2d(standData, "SHAPE", {
        "fillColor":'darkgray',
        "border": True,
        "strokeColor": "#222222" })
axle0 = obj2d(shapedefs.circle(10), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222" })
armGrp = cgo.createGroup2D(stand, axle0)

segData = ['M',0,-8, 'A',8,8,0,0,0,0,8, 'L',50,8, 'A',8,8,0,0,0,50,-8, 'Z']
seg1 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
# 利用 zIndex 決定疊層的先後次序
axle1 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle1.translate(50, 0)
seg1Grp = cgo.createGroup2D(seg1, axle1)
armGrp.addObj(seg1Grp)

# 加上第二軸
seg2 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
axle2 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle2.translate(50, 0)
seg2Grp = cgo.createGroup2D(seg2, axle2)
cgo.render(seg2Grp)
# 請注意 seg2Grp 加上 seg1Grp 物件上
seg1Grp.addObj(seg2Grp)

seg3 = obj2d(segData, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
axle3 = obj2d(shapedefs.circle(6), "SHAPE", {
        'fillColor':'gray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': 1 })
axle3.translate(50, 0)
seg3Grp = cgo.createGroup2D(seg3, axle3)
seg2Grp.addObj(seg3Grp)

seg4Data = ['M',0,-6, 'A',6,6,0,0,0,0,6, 'L',40,6, 40,12, 50,12, 50,-12, 40,-12, 40,-6, 'Z']
seg4 = obj2d(seg4Data, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
seg3Grp.addObj(seg4)

# setup animation
animData = {'s1': [0, 80, 45, 0],
                  's2': [0, -60, -60, 0],
                  's3': [0, -90, 0, 90, 0],
                  's4': [0, 30, -90, 0]}

armTwnr = tweener(0, 3500, 'loop')

def initArm(opts):
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.translate(50,0)
    seg4.transform.translate(50,0)


def armPathFn(time, opts):
    seg1Rot = armTwnr.getVal(time, opts.s1)
    seg2Rot = armTwnr.getVal(time, opts.s2)
    seg3Rot = armTwnr.getVal(time, opts.s3)
    seg4Rot = armTwnr.getVal(time, opts.s4)

    seg1Grp.transform.rotate(seg1Rot)
    seg2Grp.transform.rotate(seg2Rot)
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.rotate(seg3Rot)
    seg3Grp.transform.translate(50,0)
    seg4.transform.rotate(seg4Rot)
    seg4.transform.translate(50,0)

cgo.animate(armGrp, initArm, armPathFn, animData)
cgo.playAnimation()
&lt;/script&gt;</summary><category term="Onelink &amp; Hyperworks應用 &amp; 平面機構運動模擬"></category></entry><entry><title>40423119_W3作業</title><link href="./40423119_w3zuo-ye.html" rel="alternate"></link><published>2017-03-09T23:17:00+08:00</published><updated>2017-03-09T23:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-09:./40423119_w3zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;Hyperworks2&lt;/h1&gt;
&lt;h2&gt;翻譯影片2&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/WGAmkWxPiig" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Hyperworks2內容：&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;The 2017 HyperWorks release has a lot&lt;/b&gt;
&lt;p&gt;在2017年HyperWorks發行很多版本&lt;/p&gt;
&lt;b&gt;of enhancements to the modeling and assembly capabilities&lt;/b&gt;
&lt;p&gt;對軟件的建模和組裝能力的增強&lt;/p&gt;
&lt;b&gt;So we put in a new parts browser with a built-in part library&lt;/b&gt;
&lt;p&gt;所以我們在一個新的零件瀏覽器與一個內置零件庫&lt;/p&gt;
&lt;b&gt;The part library is a great tool for storing and loading work in progress&lt;/b&gt;
&lt;p&gt;零件庫是用於存儲和加載正在進行工作的一個很好的工具&lt;/p&gt;
&lt;b&gt;So you can store a catalog of all the common parts&lt;/b&gt;
&lt;p&gt;因此，您可以存儲所有公共部分的目錄&lt;/p&gt;
&lt;b&gt;that a workgroup needs to use,so they can download their models from their PLM system&lt;/b&gt;
&lt;p&gt;工作組需要使用，因此他們可以從他們的PLM系統下載他們的模型&lt;/p&gt;
&lt;b&gt;and store them locally in a parts library for a work in progress&lt;/b&gt;
&lt;p&gt;並將它們本地存儲在正在進行的工作的零件庫中 &lt;/p&gt;
&lt;b&gt;And it keeps revision control on them,&lt;/b&gt;
&lt;p&gt;他保持對它們的修訂控制&lt;/p&gt;
&lt;b&gt;so they can back up to the different versions and reload.&lt;/b&gt;
&lt;p&gt;所以他們可以備份到不同的版本並重新加載。&lt;/p&gt;
&lt;b&gt;And they can also build different configurations now of their models.&lt;/b&gt;
&lt;p&gt;他們也可以建立不同的配置到他們現在的的模型。&lt;/p&gt;
&lt;b&gt;In the configuration modeler now&lt;/b&gt;
&lt;p&gt;現在在配置建模器&lt;/p&gt;
&lt;b&gt;they can import parts from part library and then group&lt;/b&gt;
&lt;p&gt;他們可以從零件庫導入零件然後分組&lt;/p&gt;
&lt;b&gt;them into what we call part sets,which are&lt;/b&gt;
&lt;p&gt;他們變成我們所說的部分集&lt;/p&gt;
&lt;b&gt;convenient groupings of parts.&lt;/b&gt;
&lt;p&gt;即零件方便分組&lt;/p&gt;
&lt;b&gt;And then they can drag those parts together into assemblies,&lt;/b&gt;
&lt;p&gt;然後他們可以將這些部分一起拖入組件&lt;/p&gt;
&lt;b&gt;and configure them for different load&lt;/b&gt;
&lt;p&gt;並為不同負載配置它們的&lt;/p&gt;
&lt;b&gt;cases or different variations of their models.&lt;/b&gt;
&lt;p&gt;情況或他們的模型的不同變化&lt;/p&gt;
&lt;b&gt;the other feature of haveing parts in the software&lt;/b&gt;
&lt;p&gt;硬件部分的軟件中的另一個特點&lt;/p&gt;
&lt;b&gt;is we do part instancing now,too.&lt;/b&gt;
&lt;p&gt;我們現在也做實例化&lt;/p&gt;
&lt;b&gt;So if you load in a part that has&lt;/b&gt;
&lt;p&gt;所以如果你加載在一個部分&lt;/p&gt;
&lt;b&gt;multiple instances through the model,we support that.&lt;/b&gt;
&lt;p&gt;我們支持多個實例通過模型&lt;/p&gt;
&lt;b&gt;We don't have to create multiple copies of it.&lt;/b&gt;
&lt;p&gt;我們不必創建它的多個副本&lt;/p&gt;
&lt;b&gt;We can actually do the instancing,which is very memory efficient.&lt;/b&gt;
&lt;p&gt;我們可以做實際，這是非常有效的記憶。&lt;/p&gt;
&lt;b&gt;Also in the model building assembly&lt;/b&gt;
&lt;p&gt;也在模型建築組裝&lt;/p&gt;
&lt;b&gt;tool set is enhanced ID management as well.&lt;/b&gt;
&lt;p&gt;工具集也是增強的ID管理&lt;/p&gt;
&lt;b&gt;So not only can we assign IDs based on different rules&lt;/b&gt;
&lt;p&gt;因此，我們不僅可以根據不同的規則分配ID &lt;/p&gt;
&lt;b&gt;that you define in the software,but you can import ID systems&lt;/b&gt;
&lt;p&gt;您可以在軟件中定義，但可以導入ID系統&lt;/p&gt;
&lt;b&gt;form spreadsheets,XML files,databases,&lt;/b&gt;
&lt;p&gt;形式電子表格，XML文件，數據庫，&lt;/p&gt;
&lt;b&gt;and so forth,that are then used when&lt;/b&gt;
 &lt;p&gt;等等，然後在使用&lt;/p&gt;
&lt;b&gt;it does the renumbering or the assembly of the model.&lt;/b&gt;
&lt;p&gt;它進行重新編號或模型的組裝&lt;/p&gt;
&lt;b&gt;it has to resolve part collisions.&lt;/b&gt;
&lt;p&gt;它必須解決部分碰撞。&lt;/p&gt;
&lt;b&gt;Really important part of doing model assembly&lt;/b&gt;
&lt;p&gt;做模型組裝重要的部分&lt;/p&gt;
&lt;b&gt;is connecting all those parts together.&lt;/b&gt;
&lt;p&gt;將所有這些部分連接在一起&lt;/p&gt;
&lt;b&gt;Connectors are really vital to the overall assembly process.&lt;/b&gt;
&lt;p&gt;連接器對整個裝配過程至關重要。&lt;/p&gt;
&lt;b&gt;The quality of the connector that you create really&lt;/b&gt;
&lt;p&gt;您真正創建的連接器的質量&lt;/p&gt;
&lt;b&gt;determines the outcome of the quality&lt;/b&gt;
&lt;p&gt;確定質量的結果&lt;/p&gt;
&lt;b&gt;of the overall assembled model as well.&lt;/b&gt;
&lt;p&gt;對整體組裝模型&lt;/p&gt;
&lt;b&gt;So for us to get a good high fidelity solution,&lt;/b&gt;
&lt;p&gt;所以為我們得到一個良好的高保真度解決方案&lt;/p&gt;
&lt;b&gt;you have to have a really good connection generation as well.&lt;/b&gt;
&lt;p&gt;你必須有一個非常好的連接生成&lt;/p&gt;&lt;/p&gt;
&lt;h1&gt;利用Solvespace組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;Solvespace四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hifjpdG2q1o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Solvespace組立轉入V-rep影片&lt;/h2&gt;
&lt;p&gt;完成 Solvespace 30-50-60 cm 比例的四連桿組立, 並轉出 stl 檔案, 以 import 方式轉入 V-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5TFlfO9Ko5I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;利用Onshape組立並轉入V-rep&lt;/h1&gt;
&lt;h2&gt;Onshape四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tnjI7k_E29c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Onshape組立轉入V-rep影片&lt;/h2&gt;
&lt;p&gt;利用 Onshape 完成上述相同尺寸之四連桿機構, 以 stl 轉出後, 再轉入 V-rep&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/i1FMfhlM_tg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;Solvespace三角形頂點運動軌跡&lt;/h1&gt;
&lt;h2&gt;運動軌跡影片&lt;/h2&gt;
&lt;p&gt;在 50 連桿上加上 50-50-50 正三角形, 以 Solvespace 輸入該三角形頂點運動軌跡&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QWD_GdWxkuI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Hyperworks翻譯 &amp; V-rep應用"></category></entry><entry><title>40423119_W2作業</title><link href="./40423119_w2zuo-ye.html" rel="alternate"></link><published>2017-03-02T22:17:00+08:00</published><updated>2017-03-02T22:17:00+08:00</updated><author><name>40423119</name></author><id>tag:,2017-03-02:./40423119_w2zuo-ye.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;利用Solvespace組裝四連桿機構&lt;/h1&gt;
&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gAwOJAX0GHk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;四連桿組立影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hifjpdG2q1o" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;四連桿圖檔&lt;a href="./../data/w2/fourbar"&gt;(Download)&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;修改stunnel.conf的IP位址&lt;/h1&gt;
&lt;h2&gt;修改IP位址影片&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/UTBQGDmAGs8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Four-bar linkage &amp; IP"></category></entry></feed>